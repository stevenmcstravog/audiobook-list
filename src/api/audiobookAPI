"use strict";

//This file is mocking a web API by hitting hard coded data.
var audiobooks = require('./audiobookData').audiobooks;
var _ = require('lodash');

//This would be performed on the server in a real app. Just stubbing in.
var _generateId = function(audiobook) {
	return audiobook.title.toLowerCase().replace(/\s+/g, '') + '-' + audiobook.author.toLowerCase().replace(/\s+/g, '');
};

var _clone = function(item) {
	return JSON.parse(JSON.stringify(item)); //return cloned copy so that the item is passed by value instead of by reference
};

var AudiobookApi = {
	getAllAudiobooks: function() {
		return _clone(audiobooks); 
	},

	getAudiobookById: function(id) {
		var audiobook = _.find(audiobooks, {id: id});
		return _clone(audiobook);
	},
	
	saveAudiobook: function(audiobook) {
		//pretend an ajax call to web api is made here
		console.log('Pretend this just saved the audiobook to the DB via AJAX call...');
		
		if (audiobook.id) {
			var existingAudiobookIndex = _.indexOf(audiobooks, _.find(audiobooks, {id: audiobook.id})); 
			audiobooks.splice(existingAudiobookIndex, 1, audiobook);
		} else {
			//Just simulating creation here.
			//The server would generate ids for new audiobooks in a real app.
			//Cloning so copy returned is passed by value rather than by reference.
			audiobook.id = _generateId(audiobook);
			audiobooks.push(audiobook);
		}

		return _clone(audiobook);
	},

	deleteAudiobook: function(id) {
		console.log('Pretend this just deleted the audiobook from the DB via an AJAX call...');
		_.remove(audiobooks, { id: id});
	}
};

module.exports = AudiobookApi;
 